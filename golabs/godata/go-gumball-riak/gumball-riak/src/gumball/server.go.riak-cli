/*
	Gumball API in Go
	Uses MySQL & Riak KV
*/

package main

import (
	"fmt"
	"log"
	"net/http"
	"encoding/json"
	"github.com/codegangsta/negroni"
	"github.com/gorilla/mux"
	"github.com/unrolled/render"
	"github.com/satori/go.uuid"
    "database/sql"
	_ "github.com/go-sql-driver/mysql"
  	riak "github.com/basho/riak-go-client"
  	util "github.com/basho/taste-of-riak/go/util"
)

/*
	Go's SQL Package:  
		Tutorial: http://go-database-sql.org/index.html
		Reference: https://golang.org/pkg/database/sql/

	Go's Riak Client:
		Tutorial:  	http://docs.basho.com/riak/kv/2.2.3/developing/getting-started/golang/
		Reference: 	https://godoc.org/github.com/basho/riak-go-client#pkg-examples
		Examples: 	https://github.com/basho/riak-go-client/blob/master/examples/dev/using/basics/main.go
					http://docs.basho.com/riak/kv/2.2.3/developing/getting-started/golang/crud-operations/
					http://docs.basho.com/riak/kv/2.2.3/developing/getting-started/golang/querying/
					http://docs.basho.com/riak/kv/2.2.3/developing/usage/creating-objects/
					http://docs.basho.com/riak/kv/2.2.3/developing/usage/reading-objects/
					http://docs.basho.com/riak/kv/2.2.3/developing/usage/updating-objects/
					http://docs.basho.com/riak/kv/2.2.3/developing/usage/deleting-objects/
*/

/* Localhost */
var mysql_connect = "root:cmpe281@tcp(127.0.0.1:3306)/cmpe281"
var riak_node_1 = "localhost:8000"
var riak_node_2 = "localhost:8001"
var riak_node_3 = "localhost:8002"

/* Docker */
/*					
var mysql_connect = "root:cmpe281@tcp(mysql:3306)/cmpe281"
var riak_node_1 = "gumballriak_member_1:8087"
var riak_node_2 = "gumballriak_member_2:8087"
var riak_node_3 = "gumballriak_member_3:8087"
*/

// Riak Cluster
var cluster riak.Cluster

// NewServer configures and returns a Server.
func NewServer() *negroni.Negroni {
	formatter := render.New(render.Options{
		IndentJSON: true,
	})
	n := negroni.Classic()
	mx := mux.NewRouter()
	initRoutes(mx, formatter)
	n.UseHandler(mx)
	return n
}

// Init Database Connections

func init() {

	// MySQL Setup	
	db, err := sql.Open("mysql", mysql_connect)
	if err != nil {
		log.Fatal(err)
	} else {
		var (
			id int
			count int
			model string
			serial string
		)
		rows, err := db.Query("select id, count_gumballs, model_number, serial_number from gumball where id = ?", 1)
		if err != nil {
			log.Fatal(err)
		}
		defer rows.Close()
		for rows.Next() {
			err := rows.Scan(&id, &count, &model, &serial)
			if err != nil {
				log.Fatal(err)
			}
			log.Println(id, count, model, serial)
		}
		err = rows.Err()
		if err != nil {
			log.Fatal(err)
		}
	}
	defer db.Close()

	// Riak KV Setup	
	nodeOpts1 := &riak.NodeOptions{
		RemoteAddress: riak_node_1,
	}

	nodeOpts2 := &riak.NodeOptions{
		RemoteAddress: riak_node_2,
	}

	nodeOpts3 := &riak.NodeOptions{
		RemoteAddress: riak_node_3,
	}

	var node1 *riak.Node
	var node2 *riak.Node
	var node3 *riak.Node
	var err2 error

	if node1, err2 = riak.NewNode(nodeOpts1); err2 != nil {
		fmt.Println(err2.Error())
	}

	if node2, err2 = riak.NewNode(nodeOpts2); err2 != nil {
		fmt.Println(err2.Error())
	}

	if node3, err2 = riak.NewNode(nodeOpts3); err2 != nil {
		fmt.Println(err2.Error())
	}

	nodes := []*riak.Node{node1, node2, node3}
	opts := &riak.ClusterOptions{
		Nodes: nodes,
	}

	fmt.Println( nodes ) 

	cluster, err2 := riak.NewCluster(opts)
	if err2 != nil {
		fmt.Println(err2.Error())
	}

	defer func() {
		if err2 = cluster.Stop(); err2 != nil {
			fmt.Println(err2.Error())
		}
	}()

	if err2 = cluster.Start(); err2 != nil {
		fmt.Println(err2.Error())
	}

	// ping
	ping := &riak.PingCommand{}
	if err2 = cluster.Execute(ping); err2 != nil {
		fmt.Println(err2.Error())
	} else {
		fmt.Println("ping passed")
	}	
}


// API Routes
func initRoutes(mx *mux.Router, formatter *render.Render) {
	mx.HandleFunc("/ping", pingHandler(formatter)).Methods("GET")
	mx.HandleFunc("/gumball", gumballHandler(formatter)).Methods("GET")
	mx.HandleFunc("/gumball", gumballUpdateHandler(formatter)).Methods("PUT")
	mx.HandleFunc("/order", gumballNewOrderHandler(formatter)).Methods("POST")
	mx.HandleFunc("/order/{id}", gumballOrderStatusHandler(formatter)).Methods("GET")
	mx.HandleFunc("/order", gumballOrderStatusHandler(formatter)).Methods("GET")
	mx.HandleFunc("/orders", gumballProcessOrdersHandler(formatter)).Methods("POST")
}

// Helper Functions
func failOnError(err error, msg string) {
	if err != nil {
		log.Fatalf("%s: %s", msg, err)
		panic(fmt.Sprintf("%s: %s", msg, err))
	}
}

// API Ping Handler
func pingHandler(formatter *render.Render) http.HandlerFunc {
	return func(w http.ResponseWriter, req *http.Request) {
		formatter.JSON(w, http.StatusOK, struct{ Test string }{"API version 1.0 alive!"})
	}
}

// API Gumball Machine Handler
func gumballHandler(formatter *render.Render) http.HandlerFunc {
	return func(w http.ResponseWriter, req *http.Request) {

		var (
			id int
			count int
			model string
			serial string
		)
		db, err := sql.Open("mysql", mysql_connect)
		defer db.Close()
		if err != nil {
			log.Fatal(err)
		} else {
			rows, _ := db.Query("select id, count_gumballs, model_number, serial_number from gumball where id = ?", 1)
			defer rows.Close()
			for rows.Next() {
				rows.Scan(&id, &count, &model, &serial)
				log.Println(id, count, model, serial)
			}
		}
		result := gumballMachine {
			Id : id,
			CountGumballs : count,
			ModelNumber : model,
			SerialNumber : serial,
		}

        fmt.Println("Gumball Machine:", result )
		formatter.JSON(w, http.StatusOK, result)
	}
}

// API Update Gumball Inventory
func gumballUpdateHandler(formatter *render.Render) http.HandlerFunc {
	return func(w http.ResponseWriter, req *http.Request) {
    	var m gumballMachine
    	_ = json.NewDecoder(req.Body).Decode(&m)		
    	fmt.Println("Update Gumball Inventory To: ", m.CountGumballs)
	
		var (
			id int
			count int
			model string
			serial string
		)
		db, err := sql.Open("mysql", mysql_connect)
		defer db.Close()
		stmt, err := db.Prepare("update gumball set count_gumballs = ? where id = ?")
		if err != nil {
			log.Fatal(err)
		}
		_, err = stmt.Exec( m.CountGumballs, 1)
		if err != nil {
			log.Fatal(err)
		}

		if err != nil {
			log.Fatal(err)
		} else {
			rows, _ := db.Query("select id, count_gumballs, model_number, serial_number from gumball where id = ?", 1)
			defer rows.Close()
			for rows.Next() {
				rows.Scan(&id, &count, &model, &serial)
				log.Println(id, count, model, serial)
			}
		}
		result := gumballMachine {
			Id : id,
			CountGumballs : count,
			ModelNumber : model,
			SerialNumber : serial,
		}

        fmt.Println("Gumball Machine:", result )
		formatter.JSON(w, http.StatusOK, result)
	}
}

// API Create New Gumball Order
func gumballNewOrderHandler(formatter *render.Render) http.HandlerFunc {
	return func(w http.ResponseWriter, req *http.Request) {
		var err error

		uuid := uuid.NewV4()
		value := "Order Placed"

		obj := &riak.Object{
			ContentType:     "text/plain",
			Charset:         "utf-8",
			ContentEncoding: "utf-8",
			Value:           []byte(value),
		}

    	var ord = order {
					Id: uuid.String(),            		
					OrderStatus: "Order Placed",
		}

		cmd, err := riak.NewStoreValueCommandBuilder().
					WithBucket("orders").
					WithKey(uuid.String()).
					WithW(1).
					WithContent(obj).
					WithReturnBody(true).
					Build()

		if err != nil {
			fmt.Println(err.Error())
			return
		}

		if err = cluster.Execute(cmd); err != nil {
			fmt.Println(err.Error())
			return
		}

		svc := cmd.(*riak.StoreValueCommand)
		rsp := svc.Response
		fmt.Println(rsp)

		formatter.JSON(w, http.StatusOK, ord)
	}
}

// API Get Order Status
func gumballOrderStatusHandler(formatter *render.Render) http.HandlerFunc {
	return func(w http.ResponseWriter, req *http.Request) {
		
		params := mux.Vars(req)
		var uuid string = params["id"]
		fmt.Println( "Order ID: ", uuid )

		if uuid == ""  {
			var orders_array [] order
			formatter.JSON(w, http.StatusOK, orders_array)
		} else {

			cmd, err := riak.NewFetchValueCommandBuilder().
			    WithBucket("orders").
			    WithKey(uuid).
			    WithR(1).
			    Build()

			if err != nil {
			    fmt.Println(err.Error())
			    return
			}

			if err := cluster.Execute(cmd); err != nil {
			    fmt.Println(err.Error())
			    return
			}

			fvc := cmd.(*riak.FetchValueCommand)
			fmt.Println( fvc.Response )
			rsp := fvc.Response
			if (!rsp.IsNotFound) {
				var obj *riak.Object
				if len(rsp.Values) > 0 {
						obj = rsp.Values[0]
				} else {
						obj = &riak.Object{
							ContentType:     "text/plain",
							Charset:         "utf-8",
							ContentEncoding: "utf-8",
							Value:           nil,
						}
				}
				fmt.Println( obj )
				fmt.Println( rsp.VClock )
			}

		   	var ord = order {
							Id: uuid,            		
							OrderStatus: "",
				}

			fmt.Println( "Order: ", ord )
			formatter.JSON(w, http.StatusOK, ord)
		}
	}
}

// API Process Orders 
func gumballProcessOrdersHandler(formatter *render.Render) http.HandlerFunc {
	return func(w http.ResponseWriter, req *http.Request) {
		for key, value := range orders {
    			fmt.Println("Key:", key, "Value:", value)
    			var ord = orders[key] 
    			ord.OrderStatus = "Order Processed"
    			orders[key] = ord
			}
		fmt.Println( "Orders: ", orders )
		formatter.JSON(w, http.StatusOK, "Orders Processed!")
	}
}



/*

-- Create Database Schema (DB User: root, DB Pass: cmpe281)

create database cmpe281 ;
use cmpe281 ;

-- Create Database Table 

CREATE TABLE gumball (
  id bigint(20) NOT NULL AUTO_INCREMENT,
  version bigint(20) NOT NULL,
  count_gumballs int(11) NOT NULL,
  model_number varchar(255) NOT NULL,
  serial_number varchar(255) NOT NULL,
  PRIMARY KEY (id),
  UNIQUE KEY serial_number (serial_number)
) ;

-- Load Data

insert into gumball ( id, version, count_gumballs, model_number, serial_number ) 
values ( 1, 0, 1000, 'M102988', '1234998871109' ) ;

-- Verify Data 

select * from gumball ;


*/

  


